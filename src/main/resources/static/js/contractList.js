var ContractBox = React.createClass({
  loadContractsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'GET',
      data: {id_token: gIdToken},
      cache: false,
      success: function(data) {
        this.setState({data: data.contractIds});
        console.log(data);
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  /*handleContractSubmit: function(contract) {
    var contracts = this.state.data;
    // Optimistically set an id on the new contract. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    contract.id = Date.now();
    var newContracts = contracts.concat([contract]);
    this.setState({data: newContracts});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'GET',
      data: contract,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: contracts});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },*/
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadContractsFromServer();
    setInterval(this.loadContractsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="contractBox">
        <h1>Contracts</h1>
        <ContractList data={this.state.data} />
      </div>
    );
  }
});

var ContractList = React.createClass({
  render: function() {
    var contractNodes = this.props.data.map(function(contract) {
      return (
        <Contract key={contract} contractId={contract}>
        </Contract>
      );
    });

    return (
      <div className="contractList">
        {contractNodes}
      </div>
    );
  }
});

/*var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <div className="CommentForm">
        <form className="commentForm" onSubmit={this.handleSubmit}>
          <input
            type="text"
            id="InputName"
            placeholder="Your name"
            value={this.state.author}
            onChange={this.handleAuthorChange}
          />
          <input
            type="text"
            id="InputComment"
            placeholder="Say something..."
            value={this.state.text}
            onChange={this.handleTextChange}
          />
          <input id="submitComment" type="submit" value="Post" />
        </form>
      </div>
    );
  }
});*/

var Contract = React.createClass({
  render: function() {
    return (
      <div className="contract">
        <a href={"/contracts/"+this.props.contractId}>Contract {this.props.contractId}</a>
      </div>
    );
  }
});

ReactDOM.render(
  <ContractBox url="/api/getContracts" pollInterval={6000} />,
  document.getElementById('content')
);
